// Generated by CoffeeScript 1.6.3
(function() {
  var Data, Time;

  window.App = Ember.Application.create();

  if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
    App.deferReadiness();
    document.addEventListener("deviceready", function() {
      return App.advanceReadiness();
    });
  }

  App.Router.map(function() {
    this.route('new');
    this.route('manage');
    return this.route('detail', {
      path: '/detail/:goal_id'
    });
  });

  /*
  {
      version: 1
      goals: [
          {
              name: string
              trackNumber: boolean
              lastCompletedOn: ISO Date String
              currentStreak: {
                  length: number
                  start: ISO Date String
                  end: ISO Date String
              }
              longestStreak: {
                  length: number
                  start: ISO Date String
                  end: ISO Date String
              }
              frequency: {
                  interval: string in set ['month', 'day', 'year']
                  daysPerPeriod: integer
                  excludeWeekends: boolean
              }
              entries: [
                  {
                      date: ISO Date String,
                      numberValue: number (this field only exists on goals with 'trackNumber' set to true)
                  }
                  ...
              ]
          }
          ...
      ]
  }
  */


  Data = {
    id_counter: 1,
    currentDataVersion: 1,
    defaultData: {
      "version": 1,
      "goals": []
    },
    dataLoadedPromise: new $.Deferred(),
    initialize: function(dataObject) {
      var goal;
      this.goals = Ember.A((function() {
        var _i, _len, _ref, _results;
        _ref = dataObject.goals;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          goal = _ref[_i];
          _results.push(this.goalFromJson(goal));
        }
        return _results;
      }).call(this));
      return this.dataLoadedPromise.resolve();
    },
    allGoals: function() {
      var promise,
        _this = this;
      promise = new $.Deferred();
      this.dataLoadedPromise.then(function() {
        return promise.resolve(_this.goals);
      });
      return promise.promise();
    },
    getGoalById: function(id) {
      var promise,
        _this = this;
      if (typeof id === 'string') {
        id = parseInt(id);
      }
      promise = new $.Deferred();
      this.dataLoadedPromise.then(function() {
        var goal;
        goal = _.find(_this.goals, function(g) {
          return id === g.get('id');
        });
        return promise.resolve(goal);
      });
      return promise.promise();
    },
    newGoal: function(_arg) {
      var daysPerPeriod, excludeWeekends, goal, interval, name, trackNumber;
      name = _arg.name, trackNumber = _arg.trackNumber, interval = _arg.interval, daysPerPeriod = _arg.daysPerPeriod, excludeWeekends = _arg.excludeWeekends;
      if (this.findGoalByName(name)) {
        alert('Duplicate goal name');
        return false;
      } else {
        goal = App.GoalModel.create({
          id: this.newId(),
          name: name,
          trackNumber: trackNumber || false,
          entries: [],
          lastCompletedOn: null,
          currentStreak: {
            length: 0,
            start: null,
            end: null
          },
          longestStreak: {
            length: 0,
            start: null,
            end: null
          },
          frequency: {
            interval: interval,
            daysPerPeriod: parseInt(daysPerPeriod) || 1,
            excludeWeekends: excludeWeekends || false
          }
        });
        this.goals.pushObject(goal);
        this.saveGoals();
        return true;
      }
    },
    deleteGoal: function(goal) {
      this.goals.removeObject(goal);
      return this.saveGoals();
    },
    findGoalByName: function(name) {
      return _.find(this.goals, function(goal) {
        return goal.get('name') === name;
      });
    },
    saveGoals: function() {
      var json;
      json = JSON.stringify({
        version: this.currentDataVersion,
        goals: this.getGoalsJsonArray()
      });
      return this.writeJsonToFile(json);
    },
    getGoalsJsonArray: function() {
      var goal, _i, _len, _ref, _results;
      _ref = this.goals;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        goal = _ref[_i];
        _results.push(this.goalToJson(goal));
      }
      return _results;
    },
    goalFromJson: function(json) {
      return App.GoalModel.create(json, {
        id: this.newId()
      });
    },
    goalToJson: function(goal) {
      return {
        name: goal.name,
        trackNumber: goal.trackNumber,
        lastCompletedOn: goal.lastCompletedOn,
        entries: goal.entries,
        frequency: {
          interval: goal.frequency.interval,
          daysPerPeriod: goal.frequency.daysPerPeriod,
          excludeWeekends: goal.frequency.excludeWeekends
        }
      };
    },
    newId: function() {
      return this.id_counter++;
    },
    readDataFromFile: function() {
      var fileReadFailed, fileReadSucceeded,
        _this = this;
      fileReadFailed = function(error) {
        console.log(error);
        return _this.initialize(_this.defaultData);
      };
      fileReadSucceeded = function(event) {
        try {
          return _this.initialize(JSON.parse(event.target.result));
        } catch (_error) {
          return fileReadFailed();
        }
      };
      return window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fs) {
        return fs.root.getFile("goals.json", null, function(fileEntry) {
          return fileEntry.file(function(file) {
            var reader;
            reader = new FileReader();
            reader.onerror = fileReadFailed;
            reader.onload = fileReadSucceeded;
            return reader.readAsText(file);
          }, fileReadFailed);
        }, fileReadFailed);
      }, fileReadFailed);
    },
    writeJsonToFile: function(json) {
      var fileWriteFailed,
        _this = this;
      fileWriteFailed = function(error) {
        return alert("Error occurred while saving: " + error);
      };
      return window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fs) {
        return fs.root.getFile("goals.json", {
          create: true,
          exclusive: false
        }, function(fileEntry) {
          return fileEntry.createWriter(function(writer) {
            writer.write(json);
            return console.log('write succeeded');
          }, fileWriteFailed);
        }, fileWriteFailed);
      }, fileWriteFailed);
    },
    readInFakeData: function() {
      return this.initialize({
        version: 1,
        goals: [
          {
            name: "something",
            trackNumber: false,
            lastCompletedOn: null,
            currentStreak: {
              length: 0,
              start: null,
              end: null
            },
            longestStreak: {
              length: 0,
              start: null,
              end: null
            },
            frequency: {
              interval: 'day',
              daysPerPeriod: 1,
              excludeWeekends: false
            },
            entries: []
          }
        ]
      });
    }
  };

  if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/)) {
    document.addEventListener("deviceready", function() {
      return Data.readDataFromFile();
    });
  } else {
    jQuery(function() {
      Data.readInFakeData();
      return Data.writeJsonToFile = (function() {});
    });
  }

  App.DetailRoute = Ember.Route.extend({
    model: function(params) {
      return Data.getGoalById(params.goal_id);
    },
    afterModel: function(goal) {
      if (!goal) {
        return this.transitionTo('index');
      }
    },
    actions: {
      "delete": function() {
        return this.transitionTo('index');
      }
    }
  });

  App.DetailController = Ember.ObjectController.extend({
    frequencyDescription: Ember.computed('frequency.interval', 'frequency.daysPerPeriod', function() {
      var count, interval, number, period, prelude;
      interval = this.get('frequency.interval');
      count = this.get('frequency.daysPerPeriod');
      prelude = "Meet this goal ";
      if (interval === 'day') {
        return "" + prelude + " Every Day";
      } else {
        number = (function() {
          switch (false) {
            case count !== 1:
              return "Once";
            case count !== 2:
              return "Twice";
            default:
              return "" + count + " times";
          }
        })();
        period = (function() {
          switch (false) {
            case interval !== 'week':
              return "Week";
            default:
              return "Month";
          }
        })();
        return "" + prelude + " at least " + number + " a " + period;
      }
    }),
    actions: {
      "delete": function() {
        if (confirm("Delete this goal?")) {
          Data.deleteGoal(this.get('model'));
          return true;
        } else {
          return false;
        }
      }
    }
  });

  App.GoalListEntryController = Ember.ObjectController.extend({
    actions: {
      complete: function() {
        return this.get('model').addEntry(this.get('numberInput'));
      }
    }
  });

  App.GoalModel = Ember.Object.extend({
    hasEntryForToday: Ember.computed('lastCompletedOn', function() {
      return App.time.todaysKey() === this.get('lastCompletedOn');
    }),
    addEntry: function(goalValue) {
      var entry;
      entry = {
        date: App.time.todaysKey(),
        goalValue: goalValue
      };
      this.get('entries').unshiftObject(entry);
      this.set('lastCompletedOn', entry.date);
      this.calculateCurrentStreak();
      return Data.saveGoals();
    },
    calculateCurrentStreak: function() {
      switch (this.get('frequency.interval')) {
        case 'day':
          this.calculateDayStreak();
          break;
        case 'week':
          this.calculateWeekStreak();
          break;
        case 'month':
          this.calculateMonthStreak();
      }
      return this.updateLongestStreak();
    },
    updateLongestStreak: function() {
      var current, longest;
      current = this.get('currentStreak.length');
      longest = this.get('longestStreak.length');
      if (current > longest) {
        this.set('longestStreak.length', current);
        this.set('longestStreak.start', this.get('currentStreak.start'));
        return this.set('longestStreak.end', this.get('currentStreak.end'));
      }
    },
    calculateDayStreak: function() {
      var end, length, start, _ref;
      _ref = this.findStartOfCurrentDayStreak(this.entries), start = _ref[0], length = _ref[1];
      end = App.time.todaysKey();
      this.set('currentStreak.length', length);
      this.set('currentStreak.start', start);
      return this.set('currentStreak.end', end);
    },
    calculateWeekStreak: function() {},
    calculateMonthStreak: function() {},
    findStartOfCurrentDayStreak: function(entries, length) {
      var first, next, _ref;
      if (length == null) {
        length = 0;
      }
      if (!entries || entries.length === 0) {
        return [null, 0];
      } else if (entries.length === 1) {
        return [_.first(entries).date, length + 1];
      } else {
        _ref = _.first(entries, 2), first = _ref[0], next = _ref[1];
        console.log("Comparing first:'" + first.date + "', next:'" + next.date + "'");
        if (moment(first.date).diff(moment(next.date), 'days') > 1) {
          return [first.date, length + 1];
        } else {
          return this.findStartOfCurrentDayStreak(_.rest(entries), length + 1);
        }
      }
    }
  });

  App.IndexRoute = Ember.Route.extend({
    model: function() {
      return Data.allGoals();
    },
    actions: {
      detail: function(goal) {
        return this.transitionTo('detail', goal);
      }
    }
  });

  App.IndexController = Ember.ArrayController.extend({
    isWeekend: Ember.computed(function() {
      var dayOfWeek;
      dayOfWeek = this.days[new Date().getDay()];
      return dayOfWeek === 'Saturday' || dayOfWeek === 'Sunday';
    }),
    hasGoals: Ember.computed('length', function() {
      return 0 < this.get('length');
    }),
    filterByInterval: function(interval) {
      var _this = this;
      return _.filter(this.get('model'), function(goal) {
        return interval === goal.get('frequency.interval');
      });
    },
    filterByUnfinished: function(goals) {
      var _this = this;
      return _.filter(goals, function(goal) {
        var complete;
        complete = goal.get('hasEntryForToday') || goal.get('frequency.excludeWeekends') && _this.get('isWeekend');
        return !complete;
      });
    },
    dailyGoals: Ember.computed('model.@each', function() {
      return this.filterByInterval('day');
    }),
    weeklyGoals: Ember.computed('model.@each', function() {
      return this.filterByInterval('week');
    }),
    monthlyGoals: Ember.computed('model.@each', function() {
      return this.filterByInterval('month');
    }),
    unfinishedDailyGoals: Ember.computed('dailyGoals.@each.hasEntryForToday', 'showAll', function() {
      if (this.get('showAll')) {
        return this.get('dailyGoals');
      } else {
        return this.filterByUnfinished(this.get('dailyGoals'));
      }
    }),
    unfinishedWeeklyGoals: Ember.computed('weeklyGoals.@each.hasEntryForToday', 'showAll', function() {
      if (this.get('showAll')) {
        return this.get('weeklyGoals');
      } else {
        return this.filterByUnfinished(this.get('weeklyGoals'));
      }
    }),
    unfinishedMonthlyGoals: Ember.computed('monthlyGoals.@each.hasEntryForToday', 'showAll', function() {
      if (this.get('showAll')) {
        return this.get('monthlyGoals');
      } else {
        return this.filterByUnfinished(this.get('monthlyGoals'));
      }
    }),
    hasDailyGoals: Ember.computed('dailyGoals.length', function() {
      return 0 < this.get('dailyGoals.length');
    }),
    hasWeeklyGoals: Ember.computed('weeklyGoals.length', function() {
      return 0 < this.get('weeklyGoals.length');
    }),
    hasMonthlyGoals: Ember.computed('monthlyGoals.length', function() {
      return 0 < this.get('monthlyGoals.length');
    }),
    hasUnfinishedDailyGoals: Ember.computed('unfinishedDailyGoals.length', function() {
      return 0 < this.get('unfinishedDailyGoals.length');
    }),
    hasUnfinishedWeeklyGoals: Ember.computed('unfinishedWeeklyGoals.length', function() {
      return 0 < this.get('unfinishedWeeklyGoals.length');
    }),
    hasUnfinishedMonthlyGoals: Ember.computed('unfinishedMonthlyGoals.length', function() {
      return 0 < this.get('unfinishedMonthlyGoals.length');
    }),
    actions: {
      toggleShowAll: function() {
        return this.set('showAll', !this.get('showAll'));
      }
    }
  });

  App.ManageRoute = Ember.Route.extend({
    model: function() {
      return Data.allGoals();
    }
  });

  App.ManageController = Ember.ArrayController.extend({
    actions: {
      "delete": function(goal) {
        return Data.deleteGoal(goal);
      }
    }
  });

  App.NewRoute = Ember.Route.extend({
    actions: {
      save: function() {
        return this.transitionTo('index');
      },
      cancel: function() {
        return this.transitionTo('index');
      }
    }
  });

  App.NewController = Ember.Controller.extend({
    frequencyOptions: [
      {
        label: 'Every Day',
        id: 'day'
      }, {
        label: 'X Days a Week',
        id: 'week'
      }, {
        label: 'X Days a Month',
        id: 'month'
      }
    ],
    inputTypeOptions: [
      {
        label: 'Checkbox',
        id: 'checkbox'
      }, {
        label: 'Number',
        id: 'number'
      }
    ],
    daysPerPeriodSelection: Ember.computed('goalFrequency', function() {
      var _ref;
      return (_ref = this.get('goalFrequency')) === 'week' || _ref === 'month';
    }),
    saveForm: function() {
      return Data.newGoal({
        name: this.get('goalName'),
        trackNumber: this.get('addNumberInput'),
        interval: this.get('goalFrequency'),
        daysPerPeriod: this.get('daysPerPeriod'),
        excludeWeekends: this.get('excludeWeekends')
      });
    },
    clearForm: function() {
      this.set('goalName', '');
      this.set('addNumberInput', false);
      this.set('goalFrequency', '');
      this.set('daysPerPeriod', '');
      this.set('excludeWeekends', false);
      return true;
    },
    actions: {
      save: function() {
        var result;
        result = this.saveForm();
        if (result) {
          this.clearForm();
        }
        return result;
      },
      cancel: function() {
        return this.clearForm();
      }
    }
  });

  Time = Ember.Object.extend({
    todayDisplay: Ember.computed(function() {
      return moment().format('dddd MMMM Do');
    }),
    today: function() {
      var n;
      n = moment();
      return moment({
        years: n.year(),
        months: n.month(),
        days: n.date()
      });
    },
    todaysKey: function() {
      return this.today().toISOString();
    },
    streakLengthInDays: function(start) {
      var startDate;
      startDate = moment(start);
      return this.today().diff(startDate, 'days');
    }
  });

  App.time = Time.create();

}).call(this);
