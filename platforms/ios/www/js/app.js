// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.App = Ember.Application.create();

  App.Router.map(function() {
    return this.route('new');
  });

  App.GoalModel = Ember.Object.extend();

  App.GoalModel.reopenClass({
    loadGoals: function() {
      if (!this.get('initialized')) {
        this.loadData();
      }
      return this.get('goals');
    },
    getGoalsList: function() {
      return JSON.parse(localStorage.getItem('goals')) || [];
    },
    buildGoal: function(goalName) {
      var description, model;
      description = JSON.parse(localStorage.getItem("goal." + goalName)) || {};
      model = App.GoalModel.create(description);
      this.set("goals." + description.name, model);
      return model;
    },
    loadData: function() {
      var goalName, goalNames, _i, _len;
      goalNames = this.getGoalsList();
      this.set('goalNames', goalNames);
      this.set('goals', {});
      for (_i = 0, _len = goalNames.length; _i < _len; _i++) {
        goalName = goalNames[_i];
        this.buildGoal(goalName);
      }
      return this.set('initialized', true);
    },
    saveGoal: function(description) {
      this.addModelName(description.name);
      return this.saveModel(description);
    },
    addModelName: function(name) {
      var goalNames;
      goalNames = this.get('goalNames');
      if (__indexOf.call(goalNames, name) >= 0) {
        throw "Duplicate goal: " + description.name;
      }
      goalNames.pushObject(name);
      return localStorage.setItem('goals', JSON.stringify(goalNames));
    },
    saveModel: function(description) {
      var keyPath, model;
      model = App.GoalModel.create(description);
      keyPath = "goals." + description.name;
      this.set(keyPath, model);
      localStorage.setItem(keyPath, JSON.stringify(description));
      return model;
    }
  });

  App.IndexRoute = Ember.Route.extend({
    model: function() {
      return App.GoalModel.loadGoals();
    }
  });

  App.IndexController = Ember.ArrayController.extend({
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    today: Ember.computed(function() {
      var day, month, today, weekday;
      today = new Date();
      weekday = this.days[today.getDay()];
      month = this.months[today.getMonth()];
      day = today.getDate();
      return "" + weekday + " " + month + " " + day;
    }),
    hasGoals: Ember.computed('length', function() {
      return 0 < this.get('length');
    })
  });

  App.NewController = Ember.Controller.extend({
    frequencyOptions: ['Every Day', 'X Days a Week', 'X Days a Month'],
    daysPerPeriodSelection: Ember.computed('goalFrequency', function() {
      var selection;
      selection = this.get('goalFrequency');
      return selection === 'X Days a Week' || selection === 'X Days a Month';
    }),
    periodType: Ember.computed('goalFrequency', function() {
      var selection;
      selection = this.get('goalFrequency');
      if (selection === 'X Days a Month') {
        return 'month';
      } else {
        return 'week';
      }
    }),
    getGoalInputs: function() {
      var inputs;
      inputs = ['checkbox'];
      if (this.get('addNumericInput')) {
        inputs.push('integer');
      }
      if (this.get('addNotesInput')) {
        inputs.push('string');
      }
      return inputs;
    },
    getGoalFrequencyDescription: function() {
      return {
        interval: this.get('goalFrequency'),
        daysPerPeriod: this.get('daysPerPeriod') || 1,
        excludeWeekends: this.get('excludeWeekends') || false
      };
    },
    actions: {
      save: function() {
        return App.GoalModel.saveGoal({
          name: this.get('goalName'),
          inputs: this.getGoalInputs(),
          frequency: this.getGoalFrequencyDescription()
        });
      }
    }
  });

}).call(this);
